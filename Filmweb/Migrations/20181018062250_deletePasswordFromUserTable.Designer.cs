// <auto-generated />
using System;
using Filmweb.Entities;
using Filmweb.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Filmweb.Migrations
{
    [DbContext(typeof(FilmwebContext))]
    [Migration("20181018062250_deletePasswordFromUserTable")]
    partial class deletePasswordFromUserTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Filmweb.Entities.Cast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("BirthPlace");

                    b.Property<int>("Height");

                    b.Property<string>("ImageLink");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("Name");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Cast");
                });

            modelBuilder.Entity("Filmweb.Entities.CastFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CastFunctions");
                });

            modelBuilder.Entity("Filmweb.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Filmweb.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Filmweb.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Boxoffice");

                    b.Property<int?>("Country1Id");

                    b.Property<int?>("Country2Id");

                    b.Property<int?>("Country3Id");

                    b.Property<string>("Description");

                    b.Property<int?>("DirectorId");

                    b.Property<int?>("GenreId");

                    b.Property<DateTime>("PremierePolandDate");

                    b.Property<DateTime>("PremiereWorldDate");

                    b.Property<int?>("ScenaristId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("Country1Id");

                    b.HasIndex("Country2Id");

                    b.HasIndex("Country3Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ScenaristId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Filmweb.Entities.MovieCast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CastId");

                    b.Property<int?>("FunctionId");

                    b.Property<int?>("MovieId");

                    b.HasKey("Id");

                    b.HasIndex("CastId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCast");
                });

            modelBuilder.Entity("Filmweb.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Admin");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Filmweb.Entities.Movie", b =>
                {
                    b.HasOne("Filmweb.Entities.Country", "Country1")
                        .WithMany()
                        .HasForeignKey("Country1Id");

                    b.HasOne("Filmweb.Entities.Country", "Country2")
                        .WithMany()
                        .HasForeignKey("Country2Id");

                    b.HasOne("Filmweb.Entities.Country", "Country3")
                        .WithMany()
                        .HasForeignKey("Country3Id");

                    b.HasOne("Filmweb.Entities.Cast", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId");

                    b.HasOne("Filmweb.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("Filmweb.Entities.Cast", "Scenarist")
                        .WithMany()
                        .HasForeignKey("ScenaristId");
                });

            modelBuilder.Entity("Filmweb.Entities.MovieCast", b =>
                {
                    b.HasOne("Filmweb.Entities.Cast", "Cast")
                        .WithMany()
                        .HasForeignKey("CastId");

                    b.HasOne("Filmweb.Entities.CastFunction", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId");

                    b.HasOne("Filmweb.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId");
                });
#pragma warning restore 612, 618
        }
    }
}
